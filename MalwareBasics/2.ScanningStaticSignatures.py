# implement the function "sign" so that given a linen - in bytes- returns a unique signature of that line that is 20 characters long. 

# implement the "scan" function that, given a list of paths and a signature, reads them line by line, and returns a list of all the paths that
# have a line that matches the static signature. 
from hashlib import sha1
# to read the file in the directory. 

def sign(line):
    # following the unit test we can define this only sign one line each time.
    signature = sha1(line).hexdigest()
    return signature[0:20]

def scan(paths, signature):
    # this function opens each file from paths array. 
    # then read each line and hash it, then compare the result hash to the signature
    # if are equal, the path is introduced in the mailicious array. 
    suspicious=[]
    for file  in paths:
        with open(file, 'r') as f:
            content = f.readlines()
            f.close()
        #removing the end characaters    
        content = [x.strip() for x in content]
        for line in content:
            linedigest = sha1(line.encode('utf-8')).hexdigest()
            if linedigest[0:20] ==signature:
                suspicious.append(file)
                break
    return suspicious

